name: OTA Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'URL to the OTA zip file'
        required: true
      CUSTOM_FOLDER_NAME:
        description: 'Optional: Custom folder name for upload. If empty, uses original filename.'
        required: false
        default: ''
      UPLOAD_TARGETS:
        description: 'Select which directories to upload.'
        required: true
        type: choice
        options:
          - apk_only
          - extracted
          - output
          - both
        default: 'apk_only'
env:
  TZ: Asia/Ho_Chi_Minh
jobs:
  dump:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'proplayer1131/new-dump'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 uuid-dev liblz4-tool jq
          pip install poetry
          sed -i 's/README.md/readme.md/g' pyproject.toml
          poetry install

      - name: Erofs-utils setup
        run: |
          aria2c -x16 -s16 https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git/snapshot/erofs-utils-1.6.tar.gz
          tar -xzf erofs-utils-1.6.tar.gz
          cd erofs-utils-1.6/
          ./autogen.sh
          ./configure
          make
          sudo make install

      - name: Download and Rename ROM
        run: |
          aria2c -x16 -s16 -j5 --file-allocation=none --summary-interval=10 -o rom.zip "${{ github.event.inputs.ROM_URL }}"

      - name: Process File
        id: process_step
        run: |
          chmod +x $GITHUB_WORKSPACE/scripts/dump_and_extract.sh
          $GITHUB_WORKSPACE/scripts/dump_and_extract.sh "rom.zip"
          ORIGINAL_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}")
          echo "original_filename=$ORIGINAL_FILENAME" >> $GITHUB_OUTPUT

      - name: Set Upload Folder Name
        id: set_folder
        run: |
          if [[ -n "${{ github.event.inputs.CUSTOM_FOLDER_NAME }}" ]]; then
            FOLDER_NAME="${{ github.event.inputs.CUSTOM_FOLDER_NAME }}"
          else
            FOLDER_NAME="${{ steps.process_step.outputs.original_filename }}"
          fi
          echo "UPLOAD_FOLDER_NAME=$FOLDER_NAME" >> $GITHUB_ENV

      - name: Configure rclone from Base64 secret
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONF2}}" | base64 --decode > ~/.config/rclone/rclone.conf

      - name: Upload Dumps to OneDrive
        env:
          RCLONE_DEST: "1drive:OTA_DUMPS"
        run: |
          INCLUDE_FLAGS=""
          if [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "apk_only" ]]; then
            echo "Upload target: apk_only. Deleting non-apk files..."
            find extracted output -type f ! -name "*.apk" -delete
            INCLUDE_FLAGS="--include /output/** --include /extracted/**"
            echo "Non-apk files deleted."
          elif [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "extracted" ]]; then
            INCLUDE_FLAGS="--include /extracted/**"
            echo "Upload target: extracted"
          elif [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "output" ]]; then
            INCLUDE_FLAGS="--include /output/**"
            echo "Upload target: output"
          elif [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "both" ]]; then
            INCLUDE_FLAGS="--include /output/** --include /extracted/**"
            echo "Upload target: output and extracted"
          fi
          
          echo "Preparing to upload to ${RCLONE_DEST}/${UPLOAD_FOLDER_NAME}"
          echo "-----------------------------------------------------"
          echo "Calculating total files and size..."
          rclone size . $INCLUDE_FLAGS
          echo "-----------------------------------------------------"
          echo "Starting upload..."
          rclone copy . "${RCLONE_DEST}/${UPLOAD_FOLDER_NAME}" \
            $INCLUDE_FLAGS \
            --transfers=8 \
            --checkers=16 \
            --log-level NOTICE \
            --stats-one-line \
            --stats 30s

      - name: Generate and Output Link
        env:
          RCLONE_DEST: "1drive:OTA_DUMPS"
        run: |
          FULL_REMOTE_PATH="${RCLONE_DEST}/${UPLOAD_FOLDER_NAME}"
          
          echo "Verifying upload at: ${FULL_REMOTE_PATH}"
          
          FILE_COUNT=$(rclone lsf --max-depth 2 "${FULL_REMOTE_PATH}" | wc -l)
          
          if [ "$FILE_COUNT" -gt 0 ]; then
            echo "✅ Upload confirmed. Found $FILE_COUNT items. Getting size and link..."
            
            UPLOAD_SIZE=$(rclone size --json --copy-links "${FULL_REMOTE_PATH}" | jq -r '.bytes' | awk '{ sum=$1 ; hum[1024**3]="GB";hum[1024**2]="MB";hum[1024]="KB"; for (x=1024**3; x>=1024; x/=1024){ if (sum>=x) { printf "%.2f %s\n",sum/x,hum[x];break } }}')
            UPLOAD_LINK=$(rclone link "${FULL_REMOTE_PATH}")
            
            if [ -z "${UPLOAD_LINK}" ]; then
              echo "⚠️ Warning: Could not generate a public link. Check rclone permissions."
              UPLOAD_LINK="Không thể tạo link."
            fi
          else
            echo "❌ Error: Upload verification failed. The remote directory is empty or does not exist."
            UPLOAD_SIZE="N/A"
            UPLOAD_LINK="Tải lên thất bại."
          fi
          
          echo "::add-mask::${UPLOAD_LINK}"
          echo "BOT_OUTPUT::Tên thư mục=${UPLOAD_FOLDER_NAME}"
          echo "BOT_OUTPUT::Kích thước=${UPLOAD_SIZE:-N/A}"
          echo "BOT_OUTPUT::Link Tải=${UPLOAD_LINK}"