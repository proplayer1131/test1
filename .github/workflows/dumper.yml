name: OTA Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'URL to the OTA zip file'
        required: true
      CUSTOM_FOLDER_NAME:
        description: 'Optional: Custom folder name for the upload. If empty, uses the original filename.'
        required: false
        default: ''

jobs:
  dump:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'proplayer1131/new-dump'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 uuid-dev liblz4-tool
          pip install poetry
          sed -i 's/README.md/readme.md/g' pyproject.toml
          poetry install

      - name: Erofs-utils setup
        run: |
          aria2c -x16 -s16 https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git/snapshot/erofs-utils-1.6.tar.gz
          tar -xzf erofs-utils-1.6.tar.gz
          cd erofs-utils-1.6/
          ./autogen.sh
          ./configure
          make
          sudo make install

      - name: Download and Rename ROM
        run: |
          aria2c -x16 -s16 -j5 --file-allocation=none --summary-interval=10 -o rom.zip "${{ github.event.inputs.ROM_URL }}"

      - name: Process File
        id: process_step
        run: |
          chmod +x $GITHUB_WORKSPACE/scripts/dump_and_extract.sh
          # Process the renamed file
          $GITHUB_WORKSPACE/scripts/dump_and_extract.sh "rom.zip"
          # Keep the original filename for the default folder name
          ORIGINAL_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}")
          echo "original_filename=$ORIGINAL_FILENAME" >> $GITHUB_OUTPUT

      - name: Configure rclone from Base64 secret
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONF2}}" | base64 --decode > ~/.config/rclone/rclone.conf

      - name: Upload Dumps to OneDrive
        env:
          RCLONE_DEST: "1drive:OTA_DUMPS"
        run: |
          # Use custom folder name if provided, otherwise use the original filename
          if [[ -n "${{ github.event.inputs.CUSTOM_FOLDER_NAME }}" ]]; then
            FOLDER_NAME="${{ github.event.inputs.CUSTOM_FOLDER_NAME }}"
          else
            FOLDER_NAME="${{ steps.process_step.outputs.original_filename }}"
          fi
          
          echo "Uploading 'output' and 'extracted' directories to ${RCLONE_DEST}/${FOLDER_NAME} ..."
          rclone copy . "${RCLONE_DEST}/${FOLDER_NAME}" --include "/output/**" --include "/extracted/**" --transfers=8 --checkers=16 --progress