name: OTA Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'URL to the OTA zip file'
        required: true
      CUSTOM_FOLDER_NAME:
        description: 'Optional: Custom folder name for upload. If empty, uses original filename.'
        required: false
        default: ''
      UPLOAD_TARGETS:
        description: 'Select which directories/files to upload.'
        required: true
        type: choice
        options:
          - extracted
          - output
          - both
          - apk_only
        default: 'apk_only'

jobs:
  dump:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      - name: Checkout dumper repository
        uses: actions/checkout@v4
        with:
          repository: 'proplayer1131/new-dump'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 uuid-dev liblz4-tool jq
          pip install poetry
          sed -i 's/README.md/readme.md/g' pyproject.toml
          poetry install

      - name: Set up erofs-utils
        run: |
          aria2c -x16 -s16 https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git/snapshot/erofs-utils-1.6.tar.gz
          tar -xzf erofs-utils-1.6.tar.gz
          cd erofs-utils-1.6/
          ./autogen.sh && ./configure && make && sudo make install

      - name: Download ROM
        run: |
          aria2c -x16 -s16 -j5 --file-allocation=none --summary-interval=10 -o rom.zip "${{ github.event.inputs.ROM_URL }}"

      - name: Process File
        id: process_step
        run: |
          chmod +x $GITHUB_WORKSPACE/scripts/dump_and_extract.sh
          $GITHUB_WORKSPACE/scripts/dump_and_extract.sh "rom.zip"
          ORIGINAL_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}")
          echo "original_filename=$ORIGINAL_FILENAME" >> $GITHUB_OUTPUT

      - name: Set up rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONF2 }}" | base64 --decode > ~/.config/rclone/rclone.conf

      - name: Clean non-APK files (if selected)
        if: github.event.inputs.UPLOAD_TARGETS == 'apk_only'
        run: |
          echo "Selected apk_only. Cleaning 'extracted' directory..."
          find extracted/ -type f ! -name "*.apk" -delete
          find extracted/ -type d -empty -delete
          echo "Cleaning complete."

      - name: Upload to remote
        env:
          RCLONE_DEST: "${{ secrets.RCLONE_DESTINATION }}"
        run: |
          if [[ -n "${{ github.event.inputs.CUSTOM_FOLDER_NAME }}" ]]; then
            FOLDER_NAME="${{ github.event.inputs.CUSTOM_FOLDER_NAME }}"
          else
            FOLDER_NAME="${{ steps.process_step.outputs.original_filename }}"
          fi
          
          echo "UPLOAD_FOLDER_NAME=${FOLDER_NAME}" >> $GITHUB_ENV
          
          TARGET_PATH="${RCLONE_DEST}/${FOLDER_NAME}"
          echo "Preparing to upload to ${TARGET_PATH}"
          echo "-----------------------------------------------------"
          
          RCLONE_CMD="rclone copy --copy-links --transfers=8 --checkers=16 --log-level NOTICE --stats-one-line --stats 30s"

          if [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "extracted" || "${{ github.event.inputs.UPLOAD_TARGETS }}" == "apk_only" ]]; then
            echo "Uploading 'extracted' directory..."
            $RCLONE_CMD extracted/ "${TARGET_PATH}"
          elif [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "output" ]]; then
            echo "Uploading 'output' directory..."
            $RCLONE_CMD output/ "${TARGET_PATH}"
          elif [[ "${{ github.event.inputs.UPLOAD_TARGETS }}" == "both" ]]; then
            echo "Uploading 'extracted' directory..."
            $RCLONE_CMD extracted/ "${TARGET_PATH}"
            echo "Uploading 'output' directory..."
            $RCLONE_CMD output/ "${TARGET_PATH}"
          fi
          
          echo "-----------------------------------------------------"
          echo "Upload complete."
      
      - name: Generate and Output Link
        env:
          RCLONE_DEST: "${{ secrets.RCLONE_DESTINATION }}"
        run: |
          FULL_REMOTE_PATH="${RCLONE_DEST}/${{ env.UPLOAD_FOLDER_NAME }}"
          
          echo "Getting size and link for ${FULL_REMOTE_PATH}"
          
          UPLOAD_SIZE=$(rclone size --json --copy-links "${FULL_REMOTE_PATH}" | jq -r '.bytes' | awk '{ sum=$1 ; hum[1024**3]="GB";hum[1024**2]="MB";hum[1024]="KB"; for (x=1024**3; x>=1024; x/=1024){ if (sum>=x) { printf "%.2f %s\n",sum/x,hum[x];break } }}')
          UPLOAD_LINK=$(rclone link "${FULL_REMOTE_PATH}")

          echo "::add-mask::${UPLOAD_LINK}"
          echo "BOT_OUTPUT::Tên thư mục=${{ env.UPLOAD_FOLDER_NAME }}"
          echo "BOT_OUTPUT::Kích thước=${UPLOAD_SIZE}"
          echo "BOT_OUTPUT::Link Tải=${UPLOAD_LINK}"

