name: "Intelligent Download Book"

on:
  workflow_dispatch:
    inputs:
      BOOK_ID:
        description: "BOOK_ID to download"
        required: true
        default: "1"
      DOWNLOAD_MODE:
        description: "Ch·ªçn ch·∫ø ƒë·ªô t·∫£i"
        required: true
        default: "per_chapter"
        type: choice
        options:
          - per_chapter
          - single
      THREADS:
        description: "S·ªë lu·ªìng t·∫£i ·∫£nh ƒë·ªìng th·ªùi (max threads)"
        required: true
        default: "64"

env:
  TZ: Asia/Ho_Chi_Minh
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  download:
    runs-on: ubuntu-22.04
    timeout-minutes: 720
    env:
      BOOK_ID: ${{ github.event.inputs.BOOK_ID }}
      DOWNLOAD_MODE: ${{ github.event.inputs.DOWNLOAD_MODE }}
      THREADS: ${{ github.event.inputs.THREADS }}
      BHLNK_EMAIL: ${{ secrets.BHLNK_EMAIL }}
      BHLNK_PASSWORD: ${{ secrets.BHLNK_PASSWORD }}
      PYTHONPATH: ${{ github.workspace }}
      RCLONE_DEST: ${{ secrets.RCLONE_DEST || '1drive:/LSC_Books' }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'proplayer1131/sachyhocpdf_downloader-main'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y python3-tk jq

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install requests Pillow psutil
          if [ -f requirements.txt ]; then
            grep -v -E 'tkinter|pywin32|win32mica|upx|customtkinter|futures|tqdm' requirements.txt > requirements_linux.txt
            pip install -r requirements_linux.txt
          fi

      - name: Install and configure rclone
        env:
          RCLONE_CONF_CONTENTS: ${{ secrets.RCLONE_CONF }}
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf "%s" "$RCLONE_CONF_CONTENTS" > ~/.config/rclone/rclone.conf
          rclone version

      - name: Run Intelligent Download Script
        id: download_script
        run: python -u scripts/download_one.py | tee download.log

      - name: Read Download Status
        id: status_reader
        run: |
          if [ -f "download_status.txt" ]; then
            STATUS=$(cat download_status.txt)
            echo "Download status: $STATUS"
            echo "DOWNLOAD_STATUS=$STATUS" >> $GITHUB_OUTPUT
          else
            echo "download_status.txt not found. Assuming failure."
            echo "DOWNLOAD_STATUS=UNKNOWN_FAILURE" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload Book and Prepare Info
        id: upload_and_info
        if: |
          steps.status_reader.outputs.DOWNLOAD_STATUS == 'NEW' ||
          steps.status_reader.outputs.DOWNLOAD_STATUS == 'UPDATED' ||
          steps.status_reader.outputs.DOWNLOAD_STATUS == 'SUPPLEMENTED'
        run: |
          set -euo pipefail
          FOLDER_NAME=$(cat folder_name.txt)
          CLEAN_FOLDER_NAME=$(echo "$FOLDER_NAME" | sed 's/[:*?"<>|]/_/g')
          TARGET="${RCLONE_DEST}/${CLEAN_FOLDER_NAME}"
          
          echo "Uploading '${FOLDER_NAME}' to '${TARGET}'..."
          # Logic ƒë√£ ƒë∆∞·ª£c ƒë∆°n gi·∫£n h√≥a: ch·ªâ c·∫ßn copy th∆∞ m·ª•c ngu·ªìn
          rclone copy "${FOLDER_NAME}" "${TARGET}" --transfers=8 --checkers=16 --progress
          echo "T·∫£i l√™n ho√†n t·∫•t."
          
          INFO_FILE_PATH="${FOLDER_NAME}/book_info.json"
          
          # Logic l·∫•y th√¥ng tin s√°ch kh√¥ng ƒë·ªïi v√† gi·ªù s·∫Ω ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh
          BOOK_TITLE=$(jq -r '.name' "$INFO_FILE_PATH")
          FOLDER_LINK=$(rclone link "${TARGET}" 2>/dev/null || echo "Kh√¥ng th·ªÉ t·∫°o link")
          
          echo "BOOK_TITLE<<EOF" >> $GITHUB_OUTPUT
          echo "$BOOK_TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "FOLDER_LINK<<EOF" >> $GITHUB_OUTPUT
          echo "$FOLDER_LINK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # --- C√°c b∆∞·ªõc th√¥ng b√°o Telegram (Kh√¥ng thay ƒë·ªïi) ---
      - name: Send Notification (New/Updated/Supplemented)
        if: success() && (steps.status_reader.outputs.DOWNLOAD_STATUS == 'NEW' || steps.status_reader.outputs.DOWNLOAD_STATUS == 'UPDATED' || steps.status_reader.outputs.DOWNLOAD_STATUS == 'SUPPLEMENTED')
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ${{ steps.status_reader.outputs.DOWNLOAD_STATUS == 'NEW' && '‚úÖ T·∫£i S√°ch Ho√†n T·∫•t (S√°ch m·ªõi)' || '' }}${{ steps.status_reader.outputs.DOWNLOAD_STATUS == 'UPDATED' && 'üîÑ T·∫£i S√°ch Ho√†n T·∫•t (ƒê√£ c·∫≠p nh·∫≠t)' || '' }}${{ steps.status_reader.outputs.DOWNLOAD_STATUS == 'SUPPLEMENTED' && '‚ûï T·∫£i S√°ch Ho√†n T·∫•t (B·ªï sung file thi·∫øu)' || '' }}
            üìñ S√°ch: ${{ steps.upload_and_info.outputs.BOOK_TITLE }}
            üÜî ID: ${{ env.BOOK_ID }}
            üîó Link Th∆∞ M·ª•c: [Nh·∫•n v√†o ƒë√¢y](${{ steps.upload_and_info.outputs.FOLDER_LINK }})

      - name: Send Notification (Already Exists)
        if: success() && steps.status_reader.outputs.DOWNLOAD_STATUS == 'EXISTS'
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚ÑπÔ∏è Ki·ªÉm Tra Ho√†n T·∫•t (S√°ch ƒë√£ c√≥ s·∫µn)
            ID: `${{ env.BOOK_ID }}` - Kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi.

      - name: Send Notification (Not Found)
        if: success() && steps.status_reader.outputs.DOWNLOAD_STATUS == 'NOT_FOUND'
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚ö†Ô∏è Qu√©t Th·∫•t B·∫°i (Kh√¥ng t·ªìn t·∫°i)
            ID: `${{ env.BOOK_ID }}` - S√°ch kh√¥ng t·ªìn t·∫°i ho·∫∑c link b·ªã h·ªèng.
      
      - name: Send Failure Notification
        if: failure() || cancelled() || steps.status_reader.outputs.DOWNLOAD_STATUS == 'DOWNLOAD_FAILED' || steps.status_reader.outputs.DOWNLOAD_STATUS == 'SCRIPT_ERROR'
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚ùå *Download Failed!*
            *Book ID:* `${{ env.BOOK_ID }}`
            *Status:* `${{ job.status }}`
            *Log:* Xem file ƒë√≠nh k√®m.
          document: ./download.log
